/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => EmojiChecklistPlugin
});
var import_obsidian5 = __toModule(require("obsidian"));

// src/types.ts
var DEFAULT_SETTINGS = {
  checkedEmoji: "\u2705",
  uncheckedEmoji: "\u2B1C\uFE0F",
  tagMappings: [
    {
      tag: "stopper",
      uncheckedEmoji: "\u{1F6D1}",
      checkedEmoji: "\u2705"
    }
  ],
  jiraSettings: {
    enabled: false,
    baseUrl: "",
    username: "",
    apiToken: "",
    triggerWord: "@jira"
  },
  reportSettings: {
    enabled: true,
    showHeaders: true,
    sections: [
      {
        name: "GREETINGS",
        content: "Good Morning everyone",
        enabled: true,
        showHeader: true
      },
      {
        name: "DATE",
        content: "",
        enabled: true,
        showHeader: false
      },
      {
        name: "BODY",
        content: "",
        enabled: true,
        showHeader: true
      },
      {
        name: "STOPPERS",
        content: "",
        enabled: true,
        showHeader: true
      }
    ]
  }
};

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var EmojiChecklistSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  updateTestSection() {
    if (this.testEl) {
      this.testEl.empty();
      const header = this.testEl.createEl("h3", { text: "Live Preview" });
      const uncheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
      uncheckedExample.createEl("span", { text: "Unchecked example: " });
      const uncheckedContainer = uncheckedExample.createEl("span", { cls: "task-preview" });
      uncheckedContainer.createEl("span", {
        text: this.plugin.settings.uncheckedEmoji,
        cls: "emoji-preview"
      });
      uncheckedContainer.createEl("span", { text: " Sample task" });
      const checkedExample = this.testEl.createEl("div", { cls: "setting-item" });
      checkedExample.createEl("span", { text: "Checked example: " });
      const checkedContainer = checkedExample.createEl("span", { cls: "task-preview" });
      checkedContainer.createEl("span", {
        text: this.plugin.settings.checkedEmoji,
        cls: "emoji-preview"
      });
      const checkedText = checkedContainer.createEl("span", { text: " Sample task" });
      checkedText.style.textDecoration = "line-through";
      checkedText.style.color = "var(--text-muted)";
      if (this.plugin.settings.tagMappings.length > 0) {
        const tagHeader = this.testEl.createEl("h3", { text: "Tag Examples" });
        tagHeader.style.marginTop = "2em";
        tagHeader.style.marginBottom = "1em";
        for (const mapping of this.plugin.settings.tagMappings) {
          const tagUncheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
          tagUncheckedExample.createEl("span", { text: `#${mapping.tag} unchecked: ` });
          const tagUncheckedContainer = tagUncheckedExample.createEl("span", { cls: "task-preview" });
          tagUncheckedContainer.createEl("span", {
            text: mapping.uncheckedEmoji,
            cls: "emoji-preview"
          });
          tagUncheckedContainer.createEl("span", { text: ` Sample #${mapping.tag} task` });
          const tagCheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
          tagCheckedExample.createEl("span", { text: `#${mapping.tag} checked: ` });
          const tagCheckedContainer = tagCheckedExample.createEl("span", { cls: "task-preview" });
          tagCheckedContainer.createEl("span", {
            text: mapping.checkedEmoji,
            cls: "emoji-preview"
          });
          const tagCheckedText = tagCheckedContainer.createEl("span", { text: ` Sample #${mapping.tag} task` });
          tagCheckedText.style.textDecoration = "line-through";
          tagCheckedText.style.color = "var(--text-muted)";
          tagUncheckedExample.style.marginBottom = "0.5em";
          tagCheckedExample.style.marginBottom = "0.5em";
        }
      }
      header.style.marginTop = "2em";
      header.style.marginBottom = "1em";
      uncheckedExample.style.marginBottom = "0.5em";
      checkedExample.style.marginBottom = "0.5em";
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Emoji Checklist Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Unchecked Emoji").setDesc("Emoji to display for unchecked tasks").addText((text) => text.setValue(this.plugin.settings.uncheckedEmoji).onChange(async (value) => {
      this.plugin.settings.uncheckedEmoji = value;
      await this.plugin.saveSettings();
      this.updateTestSection();
      console.log("Updated default unchecked emoji:", this.plugin.settings.uncheckedEmoji);
    }));
    new import_obsidian.Setting(containerEl).setName("Default Checked Emoji").setDesc("Emoji to display for checked tasks").addText((text) => text.setValue(this.plugin.settings.checkedEmoji).onChange(async (value) => {
      this.plugin.settings.checkedEmoji = value;
      await this.plugin.saveSettings();
      this.updateTestSection();
      console.log("Updated default checked emoji:", this.plugin.settings.checkedEmoji);
    }));
    containerEl.createEl("h3", { text: "Tag Mappings" });
    const tagMappingsContainer = containerEl.createDiv("tag-mappings");
    this.plugin.settings.tagMappings.forEach((mapping, index) => {
      const mappingContainer = tagMappingsContainer.createDiv("tag-mapping");
      new import_obsidian.Setting(mappingContainer).setName(`Tag #${mapping.tag}`).addText((text) => text.setPlaceholder("tag name").setValue(mapping.tag).onChange(async (value) => {
        this.plugin.settings.tagMappings[index].tag = value;
        await this.plugin.saveSettings();
        this.updateTestSection();
        console.log("Updated tag mapping:", this.plugin.settings.tagMappings);
      })).addText((text) => text.setPlaceholder("unchecked emoji").setValue(mapping.uncheckedEmoji).onChange(async (value) => {
        this.plugin.settings.tagMappings[index].uncheckedEmoji = value;
        await this.plugin.saveSettings();
        this.updateTestSection();
        console.log("Updated tag mapping:", this.plugin.settings.tagMappings);
      })).addText((text) => text.setPlaceholder("checked emoji").setValue(mapping.checkedEmoji).onChange(async (value) => {
        this.plugin.settings.tagMappings[index].checkedEmoji = value;
        await this.plugin.saveSettings();
        this.updateTestSection();
        console.log("Updated tag mapping:", this.plugin.settings.tagMappings);
      })).addButton((button) => button.setIcon("trash").onClick(async () => {
        this.plugin.settings.tagMappings.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
        console.log("Removed tag mapping, remaining:", this.plugin.settings.tagMappings);
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Add Tag Mapping").setDesc("Add a new tag-emoji mapping").addButton((button) => button.setButtonText("Add New Tag").onClick(async () => {
      this.plugin.settings.tagMappings.push({
        tag: "newtag",
        uncheckedEmoji: "\u2B55",
        checkedEmoji: "\u2705"
      });
      await this.plugin.saveSettings();
      console.log("Added new tag mapping:", this.plugin.settings.tagMappings);
      this.display();
    }));
    new import_obsidian.Setting(containerEl).setName("Reset Settings").setDesc("Restore all settings to their defaults").addButton((button) => button.setButtonText("Restore Defaults").onClick(async () => {
      this.plugin.settings = Object.assign({}, DEFAULT_SETTINGS);
      await this.plugin.saveSettings();
      console.log("Reset settings to defaults:", this.plugin.settings);
      this.display();
      new import_obsidian.Notice("Settings restored to defaults");
    }));
    containerEl.createEl("h3", { text: "Jira Integration" });
    new import_obsidian.Setting(containerEl).setName("Enable Jira Integration").setDesc("Enable or disable Jira integration").addToggle((toggle) => toggle.setValue(this.plugin.settings.jiraSettings.enabled).onChange(async (value) => {
      this.plugin.settings.jiraSettings.enabled = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Trigger Word").setDesc("Word that triggers Jira task insertion (e.g., @jira)").addText((text) => text.setPlaceholder("@jira").setValue(this.plugin.settings.jiraSettings.triggerWord).onChange(async (value) => {
      this.plugin.settings.jiraSettings.triggerWord = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Jira Base URL").setDesc("Your Jira instance URL (e.g., https://your-domain.atlassian.net)").addText((text) => text.setPlaceholder("https://your-domain.atlassian.net").setValue(this.plugin.settings.jiraSettings.baseUrl).onChange(async (value) => {
      this.plugin.settings.jiraSettings.baseUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Username").setDesc("Your Jira email address").addText((text) => text.setPlaceholder("email@example.com").setValue(this.plugin.settings.jiraSettings.username).onChange(async (value) => {
      this.plugin.settings.jiraSettings.username = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Token").setDesc("Your Jira API token (from https://id.atlassian.com/manage-profile/security/api-tokens)").addText((text) => text.setPlaceholder("Enter your API token").setValue(this.plugin.settings.jiraSettings.apiToken).onChange(async (value) => {
      this.plugin.settings.jiraSettings.apiToken = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Report Settings" });
    new import_obsidian.Setting(containerEl).setName("Enable Report Feature").setDesc("Enable/disable the report formatting feature").addToggle((toggle) => toggle.setValue(this.plugin.settings.reportSettings.enabled).onChange(async (value) => {
      this.plugin.settings.reportSettings.enabled = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show Section Headers").setDesc("Show/hide section headers in the report").addToggle((toggle) => toggle.setValue(this.plugin.settings.reportSettings.showHeaders).onChange(async (value) => {
      this.plugin.settings.reportSettings.showHeaders = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Report Sections" });
    for (let i = 0; i < this.plugin.settings.reportSettings.sections.length; i++) {
      const section = this.plugin.settings.reportSettings.sections[i];
      const sectionContainer = containerEl.createDiv();
      sectionContainer.addClass("report-section-settings");
      new import_obsidian.Setting(sectionContainer).setName(`Section: ${section.name}`).setDesc("Configure this section").addToggle((toggle) => toggle.setValue(section.enabled).onChange(async (value) => {
        section.enabled = value;
        await this.plugin.saveSettings();
      })).addToggle((toggle) => toggle.setTooltip("Show section header").setValue(section.showHeader).onChange(async (value) => {
        section.showHeader = value;
        await this.plugin.saveSettings();
      })).addText((text) => text.setPlaceholder("Section content").setValue(section.content).onChange(async (value) => {
        section.content = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian.Setting(containerEl).setName("Add New Section").setDesc("Add a new section to the report").addButton((button) => button.setButtonText("Add Section").onClick(async () => {
      this.plugin.settings.reportSettings.sections.push({
        name: "New Section",
        content: "",
        enabled: true,
        showHeader: true
      });
      await this.plugin.saveSettings();
      this.display();
    }));
    new import_obsidian.Setting(containerEl).setName("Apply Changes").setDesc("Apply emoji changes to all open notes").addButton((button) => button.setButtonText("Apply Changes").onClick(() => {
      this.plugin.refreshAllNotes();
    }));
    this.testEl = containerEl.createDiv();
    this.updateTestSection();
  }
};

// src/processor.ts
var import_obsidian2 = __toModule(require("obsidian"));
var EmojiRenderChild = class extends import_obsidian2.MarkdownRenderChild {
  constructor(span) {
    super(span);
    this.span = span;
  }
  onunload() {
  }
};
var CheckboxProcessor = class {
  static findTagInLine(listItem) {
    const text = listItem.textContent || "";
    const tagMatch = text.replace(/^[^\w\s#]*\s*/, "").match(/#(\w+)/);
    return tagMatch ? tagMatch[1] : null;
  }
  static getEmojisForTag(plugin, tag, isChecked) {
    if (!tag) {
      return isChecked ? plugin.settings.checkedEmoji : plugin.settings.uncheckedEmoji;
    }
    const mapping = plugin.settings.tagMappings.find((m) => m.tag === tag);
    if (!mapping) {
      return isChecked ? plugin.settings.checkedEmoji : plugin.settings.uncheckedEmoji;
    }
    return isChecked ? mapping.checkedEmoji : mapping.uncheckedEmoji;
  }
  static updateEditorContent(editor, lineIndex, newEmoji) {
    const lineText = editor.getLine(lineIndex);
    const newText = lineText.replace(/^[^\w\s#]*\s*/, `${newEmoji} `);
    const change = {
      from: { line: lineIndex, ch: 0 },
      to: { line: lineIndex, ch: lineText.length },
      text: newText
    };
    editor.transaction({ changes: [change] });
  }
  static createEmojiSpan(emoji) {
    const span = document.createElement("span");
    span.className = "task-list-emoji";
    span.textContent = emoji;
    return span;
  }
  static styleContainer(container) {
    if (container) {
      container.style.display = "inline-block";
      container.style.verticalAlign = "top";
      container.style.marginRight = "0.5em";
    }
  }
  static setupEventListeners(plugin, checkbox, span, tag, index, editor, sectionInfo, ctx) {
    const updateEmoji = (isChecked) => {
      const newEmoji = this.getEmojisForTag(plugin, tag, isChecked);
      span.textContent = newEmoji;
      if (editor && sectionInfo) {
        this.updateEditorContent(editor, sectionInfo.lineStart + index, newEmoji);
      }
    };
    const toggleCheckbox = async () => {
      checkbox.checked = !checkbox.checked;
      updateEmoji(checkbox.checked);
      checkbox.dispatchEvent(new Event("change", { bubbles: true }));
      checkbox.dispatchEvent(new Event("click", { bubbles: true }));
      if (ctx.sourcePath) {
        ctx.addChild(new EmojiRenderChild(span));
      }
    };
    span.addEventListener("click", async (e) => {
      e.preventDefault();
      e.stopPropagation();
      await toggleCheckbox();
    });
    checkbox.addEventListener("change", () => {
      updateEmoji(checkbox.checked);
    });
  }
  static async processCheckbox(plugin, checkbox, index, editor, sectionInfo, ctx) {
    const listItem = checkbox.closest("li.task-list-item");
    if (!listItem)
      return;
    const tag = this.findTagInLine(listItem);
    const emoji = this.getEmojisForTag(plugin, tag, checkbox.checked);
    const span = this.createEmojiSpan(emoji);
    if (editor && sectionInfo) {
      this.updateEditorContent(editor, sectionInfo.lineStart + index, emoji);
    }
    this.setupEventListeners(plugin, checkbox, span, tag, index, editor, sectionInfo, ctx);
    this.styleContainer(checkbox.parentElement);
    checkbox.style.display = "none";
    checkbox.after(span);
  }
};
var processCheckboxes = function(el, ctx) {
  const checkboxes = el.querySelectorAll('li.task-list-item input[type="checkbox"]');
  const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
  const editor = view == null ? void 0 : view.editor;
  const sectionInfo = ctx.getSectionInfo(el);
  checkboxes.forEach((checkbox, index) => {
    if (!(checkbox instanceof HTMLInputElement))
      return;
    CheckboxProcessor.processCheckbox(this, checkbox, index, editor, sectionInfo, ctx);
  });
};

// src/jira.ts
var import_obsidian3 = __toModule(require("obsidian"));
var JiraClient = class {
  constructor(settings) {
    this.settings = settings;
  }
  getAuthHeader() {
    const credentials = `${this.settings.username}:${this.settings.apiToken}`;
    const base64Credentials = Buffer.from(credentials).toString("base64");
    return `Basic ${base64Credentials}`;
  }
  async testConnection() {
    const baseUrl = this.settings.baseUrl.replace(/\/$/, "");
    const apiUrl = `${baseUrl}/rest/api/2/myself`;
    try {
      const response = await (0, import_obsidian3.requestUrl)({
        url: apiUrl,
        method: "GET",
        headers: {
          "Authorization": this.getAuthHeader(),
          "Accept": "application/json"
        }
      });
      return response.status === 200;
    } catch (error) {
      console.error("Connection test failed:", error);
      return false;
    }
  }
  async searchTasks(query) {
    if (!this.settings.enabled || !this.settings.baseUrl || !this.settings.apiToken) {
      throw new Error("Jira integration is not properly configured");
    }
    const isConnected = await this.testConnection();
    if (!isConnected) {
      throw new Error("Could not authenticate with Jira. Please check your credentials.");
    }
    const baseUrl = this.settings.baseUrl.replace(/\/$/, "");
    const sanitizedQuery = query.replace(/["']/g, "");
    let jql;
    if (sanitizedQuery.toLowerCase() === "my tasks" || sanitizedQuery.toLowerCase() === "assigned to me") {
      jql = "assignee = currentUser()";
    } else if (sanitizedQuery.toLowerCase().startsWith("my")) {
      const status = sanitizedQuery.toLowerCase().includes("done") ? "Done" : sanitizedQuery.toLowerCase().includes("open") ? "Open" : null;
      jql = status ? `assignee = currentUser() AND status = "${status}"` : `assignee = currentUser() AND (summary ~ "${sanitizedQuery}" OR description ~ "${sanitizedQuery}")`;
    } else {
      jql = `assignee = currentUser() AND (summary ~ "${sanitizedQuery}" OR description ~ "${sanitizedQuery}")`;
    }
    jql += " ORDER BY updated DESC";
    console.log("JQL Query:", jql);
    const apiUrl = `${baseUrl}/rest/api/2/search?jql=${encodeURIComponent(jql)}&maxResults=10&fields=summary,status`;
    console.log("API URL:", apiUrl);
    const requestParams = {
      url: apiUrl,
      method: "GET",
      headers: {
        "Authorization": this.getAuthHeader(),
        "Accept": "application/json"
      }
    };
    try {
      console.log("Making request...");
      const response = await (0, import_obsidian3.requestUrl)(requestParams);
      console.log("Response status:", response.status);
      if (response.status !== 200) {
        console.error("Error response:", response.text);
        throw new Error(`Jira API returned status ${response.status}: ${response.text}`);
      }
      if (!response.json || !response.json.issues) {
        console.error("Invalid response format:", response);
        throw new Error("Invalid response format from Jira API");
      }
      console.log("Found issues:", response.json.issues.length);
      return response.json.issues.map((issue) => {
        var _a;
        return {
          key: issue.key,
          summary: issue.fields.summary,
          url: `${baseUrl}/browse/${issue.key}`,
          status: ((_a = issue.fields.status) == null ? void 0 : _a.name) || "Unknown"
        };
      });
    } catch (error) {
      console.error("Error details:", {
        message: error.message,
        status: error.status,
        response: error.response
      });
      if (error.status === 401 || error.status === 403) {
        throw new Error("Authentication failed. Please verify:\n1. Your email address is correct\n2. Your API token is correct\n3. You have the necessary permissions");
      }
      throw error;
    }
  }
  async formatTasksAsMarkdown(tasks) {
    return tasks.map((task) => `- [ ] [${task.key}: ${task.summary}](${task.url}) (${task.status})`).join("\n");
  }
};

// src/suggester.ts
var import_obsidian4 = __toModule(require("obsidian"));
var JiraTaskSuggester = class extends import_obsidian4.SuggestModal {
  constructor(app, tasks, onSelect) {
    super(app);
    this.tasks = [];
    console.log("JiraTaskSuggester constructor called");
    console.log("Tasks received:", tasks);
    this.tasks = tasks;
    this.onSelect = onSelect;
    this.setPlaceholder("Select a Jira task...");
    this.containerEl.addClass("jira-task-suggester");
    this.modalEl.style.maxWidth = "600px";
    this.modalEl.style.width = "80%";
    this.modalEl.style.top = "30%";
    this.modalEl.style.left = "50%";
    this.modalEl.style.transform = "translate(-50%, -30%)";
    this.modalEl.style.position = "fixed";
    const suggestionsContainer = this.modalEl.querySelector(".suggestion-container");
    if (suggestionsContainer instanceof HTMLElement) {
      suggestionsContainer.style.maxHeight = "400px";
      suggestionsContainer.style.width = "100%";
    }
    this.scope = new import_obsidian4.Scope();
    this.scope.register([], "Escape", () => {
      this.close();
      return false;
    });
    console.log("About to open modal");
    this.open();
  }
  open() {
    console.log("Explicitly opening modal");
    super.open();
    this.containerEl.style.display = "block";
    this.containerEl.style.visibility = "visible";
    this.containerEl.style.opacity = "1";
  }
  getSuggestions(query) {
    console.log("Getting suggestions for query:", query);
    const lowerQuery = query.toLowerCase();
    const filteredTasks = this.tasks.filter((task) => task.key.toLowerCase().includes(lowerQuery) || task.summary.toLowerCase().includes(lowerQuery));
    console.log("Filtered tasks:", filteredTasks);
    return filteredTasks;
  }
  renderSuggestion(task, el) {
    console.log("Rendering suggestion for task:", task);
    const container = el.createDiv({ cls: "jira-task-suggestion" });
    const keyEl = container.createDiv({ cls: "jira-key" });
    keyEl.setText(task.key);
    const summaryEl = container.createDiv({ cls: "jira-summary" });
    summaryEl.setText(task.summary);
    const statusEl = container.createDiv({ cls: "jira-status" });
    statusEl.setText(task.status);
    el.style.display = "flex";
    el.style.flexDirection = "column";
    el.style.gap = "4px";
    keyEl.style.fontWeight = "bold";
    keyEl.style.color = "var(--text-accent)";
    statusEl.style.fontSize = "0.8em";
    statusEl.style.color = "var(--text-muted)";
    statusEl.style.fontStyle = "italic";
  }
  onChooseSuggestion(task, evt) {
    console.log("Task chosen:", task);
    if (this.onSelect) {
      this.onSelect(task);
    }
    this.close();
  }
};

// src/main.ts
var EmojiChecklistPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Plugin loaded with settings:", this.settings);
    this.registerEvent(this.app.workspace.on("editor-change", (editor) => {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.slice(0, cursor.ch);
      const triggerWord = this.settings.jiraSettings.triggerWord;
      console.log("Checking for trigger:", {
        triggerWord,
        beforeCursor,
        endsWith: beforeCursor.endsWith(triggerWord),
        enabled: this.settings.jiraSettings.enabled
      });
      if (beforeCursor.endsWith(triggerWord)) {
        console.log("Trigger word detected, handling Jira trigger");
        this.handleJiraTrigger(editor);
      }
    }));
    this.addCommand({
      id: "insert-jira-issue",
      name: "Insert Jira Issue",
      checkCallback: (checking) => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
        if (!view)
          return false;
        if (!checking) {
          this.insertJiraIssue(view);
        }
        return true;
      }
    });
    this.registerMarkdownPostProcessor(processCheckboxes.bind(this));
    this.addSettingTab(new EmojiChecklistSettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor) => {
      if (editor.getSelection()) {
        menu.addItem((item) => {
          item.setTitle("Copy as Formatted Report").setIcon("clipboard-copy").onClick(() => this.formatAndCopyToClipboard(editor));
        });
      }
    }));
  }
  formatAndCopyToClipboard(editor) {
    const selectedText = editor.getSelection();
    if (!selectedText) {
      new import_obsidian5.Notice("No text selected");
      return;
    }
    if (!this.settings.reportSettings.enabled) {
      new import_obsidian5.Notice("Report feature is disabled in settings");
      return;
    }
    const getEmoji = (line, isChecked) => {
      for (const mapping of this.settings.tagMappings) {
        if (line.toLowerCase().includes(`#${mapping.tag.toLowerCase()}`)) {
          return isChecked ? mapping.checkedEmoji : mapping.uncheckedEmoji;
        }
      }
      return isChecked ? this.settings.checkedEmoji : this.settings.uncheckedEmoji;
    };
    const lines = selectedText.split("\n");
    const processLine = (line) => {
      line = line.trim();
      if (line.startsWith("- [x]")) {
        return line.replace("- [x]", getEmoji(line, true));
      } else if (line.startsWith("- [ ]")) {
        return line.replace("- [ ]", getEmoji(line, false));
      }
      return line;
    };
    const tasks = lines.filter((line) => line.trim().length > 0).map(processLine);
    const stoppers = lines.filter((line) => line.toLowerCase().includes("#stopper")).map(processLine);
    const today = new Date().toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric"
    });
    const contentParts = [];
    for (const section of this.settings.reportSettings.sections) {
      if (!section.enabled)
        continue;
      if (this.settings.reportSettings.showHeaders && section.showHeader) {
        contentParts.push(`### ${section.name}`);
      }
      let sectionContent = section.content;
      switch (section.name) {
        case "DATE":
          sectionContent = `\u{1F4C5} ${today}`;
          break;
        case "BODY":
          sectionContent = tasks.filter((task) => !task.toLowerCase().includes("#stopper")).join("\n");
          break;
        case "STOPPERS":
          sectionContent = stoppers.join("\n");
          break;
      }
      if (sectionContent) {
        contentParts.push(sectionContent);
        contentParts.push("");
      }
    }
    const formattedContent = contentParts.join("\n");
    navigator.clipboard.writeText(formattedContent).then(() => {
      new import_obsidian5.Notice("Formatted content copied to clipboard");
    }).catch(() => {
      new import_obsidian5.Notice("Failed to copy to clipboard");
    });
  }
  async insertJiraIssue(view) {
    if (!this.settings.jiraSettings.enabled) {
      new import_obsidian5.Notice("Please enable and configure Jira integration in settings first");
      return;
    }
    try {
      const jiraClient = new JiraClient(this.settings.jiraSettings);
      const tasks = await jiraClient.searchTasks("my tasks");
      if (tasks.length === 0) {
        new import_obsidian5.Notice("No Jira tasks found assigned to you");
        return;
      }
      new JiraTaskSuggester(this.app, tasks, (selectedTask) => {
        const cursor = view.editor.getCursor();
        const taskMarkdown = `- [ ] [${selectedTask.key}: ${selectedTask.summary}](${selectedTask.url}) (${selectedTask.status})`;
        view.editor.replaceRange(taskMarkdown + "\n", cursor, cursor);
        view.editor.setCursor({
          line: cursor.line + 1,
          ch: 0
        });
      });
    } catch (error) {
      console.error("Error fetching Jira tasks:", error);
      new import_obsidian5.Notice(error.message || "Error fetching Jira tasks");
    }
  }
  async handleJiraTrigger(_editor) {
    console.log("handleJiraTrigger called");
    if (!this.settings.jiraSettings.enabled) {
      console.log("Jira integration not enabled");
      new import_obsidian5.Notice("Please enable and configure Jira integration in settings first");
      return;
    }
    try {
      console.log("Creating Jira client with settings:", this.settings.jiraSettings);
      const jiraClient = new JiraClient(this.settings.jiraSettings);
      console.log("Fetching tasks...");
      const tasks = await jiraClient.searchTasks("my tasks");
      console.log("Fetched tasks:", tasks);
      if (tasks.length === 0) {
        console.log("No tasks found");
        new import_obsidian5.Notice("No Jira tasks found assigned to you");
        return;
      }
      console.log("Opening task suggester with", tasks.length, "tasks");
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (!activeView) {
        console.error("No active markdown view");
        new import_obsidian5.Notice("Please open a markdown note first");
        return;
      }
      try {
        const suggester = new JiraTaskSuggester(this.app, tasks, (selectedTask) => {
          console.log("Task selected:", selectedTask);
          const editor = activeView.editor;
          const cursor = editor.getCursor();
          const triggerWord = this.settings.jiraSettings.triggerWord;
          const currentLine = editor.getLine(cursor.line);
          const newLine = currentLine.slice(0, cursor.ch - triggerWord.length) + `[${selectedTask.key}: ${selectedTask.summary}](${selectedTask.url}) (${selectedTask.status})` + currentLine.slice(cursor.ch);
          editor.setLine(cursor.line, newLine);
          editor.setCursor({
            line: cursor.line,
            ch: cursor.ch - triggerWord.length + `[${selectedTask.key}: ${selectedTask.summary}](${selectedTask.url}) (${selectedTask.status})`.length
          });
        });
        console.log("Suggester created:", suggester);
      } catch (suggesterError) {
        console.error("Error creating suggester:", suggesterError);
        new import_obsidian5.Notice("Failed to create task suggester");
      }
    } catch (error) {
      console.error("Error in handleJiraTrigger:", error);
      new import_obsidian5.Notice(error.message || "Error fetching Jira tasks");
    }
  }
  async loadSettings() {
    const loadedData = await this.loadData();
    console.log("Loaded data:", loadedData);
    this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData);
    console.log("Merged settings:", this.settings);
  }
  async saveSettings() {
    console.log("Saving settings:", this.settings);
    await this.saveData(this.settings);
  }
  refreshAllNotes() {
    this.app.workspace.trigger("markdown-preview-refresh");
    this.app.workspace.iterateAllLeaves((leaf) => {
      var _a;
      if (leaf.view.getViewType() === "markdown") {
        (_a = leaf.view.previewMode) == null ? void 0 : _a.rerender(true);
      }
    });
    new import_obsidian5.Notice("Applied emoji changes to all notes");
  }
};
//# sourceMappingURL=data:application/json;base64,
