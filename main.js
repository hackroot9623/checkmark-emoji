/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => EmojiChecklistPlugin
});
var import_obsidian7 = __toModule(require("obsidian"));

// src/types.ts
var DEFAULT_SETTINGS = {
  checkedEmoji: "\u2705",
  uncheckedEmoji: "\u2B1C\uFE0F",
  tagMappings: [
    {
      tag: "stopper",
      uncheckedEmoji: "\u{1F6D1}",
      checkedEmoji: "\u2705"
    }
  ],
  jiraSettings: {
    enabled: false,
    baseUrl: "",
    username: "",
    apiToken: "",
    triggerWord: "@jira"
  },
  reportSettings: {
    enabled: true,
    showHeaders: true,
    sections: [
      {
        name: "GREETINGS",
        content: "Good Morning everyone",
        enabled: true,
        showHeader: true
      },
      {
        name: "DATE",
        content: "",
        enabled: true,
        showHeader: false
      },
      {
        name: "BODY",
        content: "",
        enabled: true,
        showHeader: true
      },
      {
        name: "STOPPERS",
        content: "",
        enabled: true,
        showHeader: true
      }
    ]
  },
  gitSettings: {
    githubToken: "",
    gitlabToken: "",
    gitlabUrl: ""
  }
};

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var EmojiChecklistSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  updateTestSection() {
    if (this.testEl) {
      this.testEl.empty();
      const header = this.testEl.createEl("h3", { text: "Live Preview" });
      const uncheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
      uncheckedExample.createEl("span", { text: "Unchecked example: " });
      const uncheckedContainer = uncheckedExample.createEl("span", { cls: "task-preview" });
      uncheckedContainer.createEl("span", {
        text: this.plugin.settings.uncheckedEmoji,
        cls: "emoji-preview"
      });
      uncheckedContainer.createEl("span", { text: " Sample task" });
      const checkedExample = this.testEl.createEl("div", { cls: "setting-item" });
      checkedExample.createEl("span", { text: "Checked example: " });
      const checkedContainer = checkedExample.createEl("span", { cls: "task-preview" });
      checkedContainer.createEl("span", {
        text: this.plugin.settings.checkedEmoji,
        cls: "emoji-preview"
      });
      const checkedText = checkedContainer.createEl("span", { text: " Sample task" });
      checkedText.style.textDecoration = "line-through";
      checkedText.style.color = "var(--text-muted)";
      if (this.plugin.settings.tagMappings.length > 0) {
        const tagHeader = this.testEl.createEl("h3", { text: "Tag Examples" });
        tagHeader.style.marginTop = "2em";
        tagHeader.style.marginBottom = "1em";
        for (const mapping of this.plugin.settings.tagMappings) {
          const tagUncheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
          tagUncheckedExample.createEl("span", { text: `#${mapping.tag} unchecked: ` });
          const tagUncheckedContainer = tagUncheckedExample.createEl("span", { cls: "task-preview" });
          tagUncheckedContainer.createEl("span", {
            text: mapping.uncheckedEmoji,
            cls: "emoji-preview"
          });
          tagUncheckedContainer.createEl("span", { text: ` Sample #${mapping.tag} task` });
          const tagCheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
          tagCheckedExample.createEl("span", { text: `#${mapping.tag} checked: ` });
          const tagCheckedContainer = tagCheckedExample.createEl("span", { cls: "task-preview" });
          tagCheckedContainer.createEl("span", {
            text: mapping.checkedEmoji,
            cls: "emoji-preview"
          });
          const tagCheckedText = tagCheckedContainer.createEl("span", { text: ` Sample #${mapping.tag} task` });
          tagCheckedText.style.textDecoration = "line-through";
          tagCheckedText.style.color = "var(--text-muted)";
          tagUncheckedExample.style.marginBottom = "0.5em";
          tagCheckedExample.style.marginBottom = "0.5em";
        }
      }
      header.style.marginTop = "2em";
      header.style.marginBottom = "1em";
      uncheckedExample.style.marginBottom = "0.5em";
      checkedExample.style.marginBottom = "0.5em";
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Emoji Checklist Settings" });
    this.testEl = containerEl.createDiv();
    this.updateTestSection();
    containerEl.createEl("h3", { text: "Basic Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Unchecked Emoji").setDesc("Emoji to use for unchecked tasks").addText((text) => text.setPlaceholder("\u2B1C\uFE0F").setValue(this.plugin.settings.uncheckedEmoji).onChange((value) => {
      this.plugin.settings.uncheckedEmoji = value;
      this.updateTestSection();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Checked Emoji").setDesc("Emoji to use for checked tasks").addText((text) => text.setPlaceholder("\u2705").setValue(this.plugin.settings.checkedEmoji).onChange((value) => {
      this.plugin.settings.checkedEmoji = value;
      this.updateTestSection();
    }));
    containerEl.createEl("h3", { text: "Tag Mappings" });
    const tagMappingsContainer = containerEl.createDiv("tag-mappings");
    this.plugin.settings.tagMappings.forEach((mapping, index) => {
      const mappingContainer = tagMappingsContainer.createDiv("tag-mapping");
      new import_obsidian.Setting(mappingContainer).setName(`Tag #${mapping.tag}`).addText((text) => text.setPlaceholder("tag name").setValue(mapping.tag).onChange((value) => {
        this.plugin.settings.tagMappings[index].tag = value;
        this.updateTestSection();
      })).addText((text) => text.setPlaceholder("unchecked emoji").setValue(mapping.uncheckedEmoji).onChange((value) => {
        this.plugin.settings.tagMappings[index].uncheckedEmoji = value;
        this.updateTestSection();
      })).addText((text) => text.setPlaceholder("checked emoji").setValue(mapping.checkedEmoji).onChange((value) => {
        this.plugin.settings.tagMappings[index].checkedEmoji = value;
        this.updateTestSection();
      })).addButton((button) => button.setIcon("trash").onClick(() => {
        this.plugin.settings.tagMappings.splice(index, 1);
        this.display();
      }));
    });
    new import_obsidian.Setting(tagMappingsContainer).addButton((button) => button.setButtonText("Add Tag Mapping").onClick(() => {
      this.plugin.settings.tagMappings.push({
        tag: "",
        uncheckedEmoji: "",
        checkedEmoji: ""
      });
      this.display();
    }));
    containerEl.createEl("h3", { text: "Jira Integration" });
    new import_obsidian.Setting(containerEl).setName("Enable Jira Integration").setDesc("Enable/disable Jira integration").addToggle((toggle) => toggle.setValue(this.plugin.settings.jiraSettings.enabled).onChange((value) => {
      this.plugin.settings.jiraSettings.enabled = value;
    }));
    new import_obsidian.Setting(containerEl).setName("Trigger Word").setDesc("Word that triggers Jira task insertion (e.g., @jira)").addText((text) => text.setPlaceholder("@jira").setValue(this.plugin.settings.jiraSettings.triggerWord).onChange((value) => {
      this.plugin.settings.jiraSettings.triggerWord = value;
    }));
    new import_obsidian.Setting(containerEl).setName("Jira Base URL").setDesc("Your Jira instance URL (e.g., https://your-domain.atlassian.net)").addText((text) => text.setPlaceholder("https://your-domain.atlassian.net").setValue(this.plugin.settings.jiraSettings.baseUrl).onChange((value) => {
      this.plugin.settings.jiraSettings.baseUrl = value;
    }));
    new import_obsidian.Setting(containerEl).setName("Username").setDesc("Your Jira email address").addText((text) => text.setPlaceholder("email@example.com").setValue(this.plugin.settings.jiraSettings.username).onChange((value) => {
      this.plugin.settings.jiraSettings.username = value;
    }));
    new import_obsidian.Setting(containerEl).setName("API Token").setDesc("Your Jira API token (from https://id.atlassian.com/manage-profile/security/api-tokens)").addText((text) => text.setPlaceholder("Enter your API token").setValue(this.plugin.settings.jiraSettings.apiToken).onChange((value) => {
      this.plugin.settings.jiraSettings.apiToken = value;
    }));
    containerEl.createEl("h3", { text: "Git Integration" });
    new import_obsidian.Setting(containerEl).setName("GitHub Token").setDesc("Your GitHub personal access token").addText((text) => text.setPlaceholder("ghp_...").setValue(this.plugin.settings.gitSettings.githubToken).onChange((value) => {
      this.plugin.settings.gitSettings.githubToken = value;
    }));
    new import_obsidian.Setting(containerEl).setName("GitLab Token").setDesc("Your GitLab personal access token").addText((text) => text.setPlaceholder("glpat-...").setValue(this.plugin.settings.gitSettings.gitlabToken).onChange((value) => {
      this.plugin.settings.gitSettings.gitlabToken = value;
    }));
    new import_obsidian.Setting(containerEl).setName("GitLab URL").setDesc("Your GitLab instance URL (e.g., https://gitlab.com)").addText((text) => text.setPlaceholder("https://gitlab.com").setValue(this.plugin.settings.gitSettings.gitlabUrl).onChange((value) => {
      this.plugin.settings.gitSettings.gitlabUrl = value;
    }));
    containerEl.createEl("h2", { text: "Report Settings" });
    new import_obsidian.Setting(containerEl).setName("Enable Report Feature").setDesc("Enable/disable the report formatting feature").addToggle((toggle) => toggle.setValue(this.plugin.settings.reportSettings.enabled).onChange((value) => {
      this.plugin.settings.reportSettings.enabled = value;
    }));
    new import_obsidian.Setting(containerEl).setName("Show Section Headers").setDesc("Show/hide section headers in the report").addToggle((toggle) => toggle.setValue(this.plugin.settings.reportSettings.showHeaders).onChange((value) => {
      this.plugin.settings.reportSettings.showHeaders = value;
    }));
    containerEl.createEl("h3", { text: "Report Sections" });
    for (let i = 0; i < this.plugin.settings.reportSettings.sections.length; i++) {
      const section = this.plugin.settings.reportSettings.sections[i];
      const sectionContainer = containerEl.createDiv();
      sectionContainer.addClass("report-section-settings");
      new import_obsidian.Setting(sectionContainer).setName(`Section: ${section.name}`).setDesc("Configure this section").addToggle((toggle) => toggle.setValue(section.enabled).onChange((value) => {
        section.enabled = value;
      })).addToggle((toggle) => toggle.setTooltip("Show section header").setValue(section.showHeader).onChange((value) => {
        section.showHeader = value;
      })).addText((text) => text.setPlaceholder("Section content").setValue(section.content).onChange((value) => {
        section.content = value;
      }));
    }
    new import_obsidian.Setting(containerEl).setName("Add New Section").setDesc("Add a new section to the report").addButton((button) => button.setButtonText("Add Section").onClick(() => {
      this.plugin.settings.reportSettings.sections.push({
        name: "New Section",
        content: "",
        enabled: true,
        showHeader: true
      });
      this.display();
    }));
    containerEl.createEl("h3", { text: "Save Changes" });
    new import_obsidian.Setting(containerEl).setName("Apply All Settings").setDesc("Save all changes made to the settings").addButton((button) => button.setButtonText("Apply").setCta().onClick(async () => {
      await this.plugin.saveSettings();
      new import_obsidian.Notice("All settings have been saved");
      this.plugin.refreshAllNotes();
    }));
  }
};

// src/processor.ts
var import_obsidian2 = __toModule(require("obsidian"));
var EmojiRenderChild = class extends import_obsidian2.MarkdownRenderChild {
  constructor(span) {
    super(span);
    this.span = span;
  }
  onunload() {
  }
};
var CheckboxProcessor = class {
  static findTagInLine(listItem) {
    const text = listItem.textContent || "";
    const tagMatch = text.replace(/^[^\w\s#]*\s*/, "").match(/#(\w+)/);
    return tagMatch ? tagMatch[1] : null;
  }
  static getEmojisForTag(plugin, tag, isChecked) {
    if (!tag) {
      return isChecked ? plugin.settings.checkedEmoji : plugin.settings.uncheckedEmoji;
    }
    const mapping = plugin.settings.tagMappings.find((m) => m.tag === tag);
    if (!mapping) {
      return isChecked ? plugin.settings.checkedEmoji : plugin.settings.uncheckedEmoji;
    }
    return isChecked ? mapping.checkedEmoji : mapping.uncheckedEmoji;
  }
  static updateEditorContent(editor, lineIndex, newEmoji) {
    const lineText = editor.getLine(lineIndex);
    const newText = lineText.replace(/^[^\w\s#]*\s*/, `${newEmoji} `);
    const change = {
      from: { line: lineIndex, ch: 0 },
      to: { line: lineIndex, ch: lineText.length },
      text: newText
    };
    editor.transaction({ changes: [change] });
  }
  static createEmojiSpan(emoji) {
    const span = document.createElement("span");
    span.className = "task-list-emoji";
    span.textContent = emoji;
    return span;
  }
  static styleContainer(container) {
    if (container) {
      container.style.display = "inline-block";
      container.style.verticalAlign = "top";
      container.style.marginRight = "0.5em";
    }
  }
  static setupEventListeners(plugin, checkbox, span, tag, index, editor, sectionInfo, ctx) {
    const updateEmoji = (isChecked) => {
      const newEmoji = this.getEmojisForTag(plugin, tag, isChecked);
      span.textContent = newEmoji;
      if (editor && sectionInfo) {
        this.updateEditorContent(editor, sectionInfo.lineStart + index, newEmoji);
      }
    };
    const toggleCheckbox = async () => {
      checkbox.checked = !checkbox.checked;
      updateEmoji(checkbox.checked);
      checkbox.dispatchEvent(new Event("change", { bubbles: true }));
      checkbox.dispatchEvent(new Event("click", { bubbles: true }));
      if (ctx.sourcePath) {
        ctx.addChild(new EmojiRenderChild(span));
      }
    };
    span.addEventListener("click", async (e) => {
      e.preventDefault();
      e.stopPropagation();
      await toggleCheckbox();
    });
    checkbox.addEventListener("change", () => {
      updateEmoji(checkbox.checked);
    });
  }
  static async processCheckbox(plugin, checkbox, index, editor, sectionInfo, ctx) {
    const listItem = checkbox.closest("li.task-list-item");
    if (!listItem)
      return;
    const tag = this.findTagInLine(listItem);
    const emoji = this.getEmojisForTag(plugin, tag, checkbox.checked);
    const span = this.createEmojiSpan(emoji);
    if (editor && sectionInfo) {
      this.updateEditorContent(editor, sectionInfo.lineStart + index, emoji);
    }
    this.setupEventListeners(plugin, checkbox, span, tag, index, editor, sectionInfo, ctx);
    this.styleContainer(checkbox.parentElement);
    checkbox.style.display = "none";
    checkbox.after(span);
  }
};
var processCheckboxes = function(el, ctx) {
  const checkboxes = el.querySelectorAll('li.task-list-item input[type="checkbox"]');
  const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
  const editor = view == null ? void 0 : view.editor;
  const sectionInfo = ctx.getSectionInfo(el);
  checkboxes.forEach((checkbox, index) => {
    if (!(checkbox instanceof HTMLInputElement))
      return;
    CheckboxProcessor.processCheckbox(this, checkbox, index, editor, sectionInfo, ctx);
  });
};

// src/jira.ts
var import_obsidian3 = __toModule(require("obsidian"));
var JiraClient = class {
  constructor(settings) {
    this.settings = settings;
  }
  getAuthHeader() {
    const credentials = `${this.settings.username}:${this.settings.apiToken}`;
    const base64Credentials = Buffer.from(credentials).toString("base64");
    return `Basic ${base64Credentials}`;
  }
  async testConnection() {
    const baseUrl = this.settings.baseUrl.replace(/\/$/, "");
    const apiUrl = `${baseUrl}/rest/api/2/myself`;
    try {
      const response = await (0, import_obsidian3.requestUrl)({
        url: apiUrl,
        method: "GET",
        headers: {
          "Authorization": this.getAuthHeader(),
          "Accept": "application/json"
        }
      });
      return response.status === 200;
    } catch (error) {
      console.error("Connection test failed:", error);
      return false;
    }
  }
  async searchTasks(query) {
    if (!this.settings.enabled || !this.settings.baseUrl || !this.settings.apiToken) {
      throw new Error("Jira integration is not properly configured");
    }
    const isConnected = await this.testConnection();
    if (!isConnected) {
      throw new Error("Could not authenticate with Jira. Please check your credentials.");
    }
    const baseUrl = this.settings.baseUrl.replace(/\/$/, "");
    const sanitizedQuery = query.replace(/["']/g, "");
    let jql;
    if (sanitizedQuery.toLowerCase() === "my tasks" || sanitizedQuery.toLowerCase() === "assigned to me") {
      jql = "assignee = currentUser()";
    } else if (sanitizedQuery.toLowerCase().startsWith("my")) {
      const status = sanitizedQuery.toLowerCase().includes("done") ? "Done" : sanitizedQuery.toLowerCase().includes("open") ? "Open" : null;
      jql = status ? `assignee = currentUser() AND status = "${status}"` : `assignee = currentUser() AND (summary ~ "${sanitizedQuery}" OR description ~ "${sanitizedQuery}")`;
    } else {
      jql = `assignee = currentUser() AND (summary ~ "${sanitizedQuery}" OR description ~ "${sanitizedQuery}")`;
    }
    jql += " ORDER BY updated DESC";
    console.log("JQL Query:", jql);
    const apiUrl = `${baseUrl}/rest/api/2/search?jql=${encodeURIComponent(jql)}&maxResults=10&fields=summary,status`;
    console.log("API URL:", apiUrl);
    const requestParams = {
      url: apiUrl,
      method: "GET",
      headers: {
        "Authorization": this.getAuthHeader(),
        "Accept": "application/json"
      }
    };
    try {
      console.log("Making request...");
      const response = await (0, import_obsidian3.requestUrl)(requestParams);
      console.log("Response status:", response.status);
      if (response.status !== 200) {
        console.error("Error response:", response.text);
        throw new Error(`Jira API returned status ${response.status}: ${response.text}`);
      }
      if (!response.json || !response.json.issues) {
        console.error("Invalid response format:", response);
        throw new Error("Invalid response format from Jira API");
      }
      console.log("Found issues:", response.json.issues.length);
      return response.json.issues.map((issue) => {
        var _a;
        return {
          key: issue.key,
          summary: issue.fields.summary,
          url: `${baseUrl}/browse/${issue.key}`,
          status: ((_a = issue.fields.status) == null ? void 0 : _a.name) || "Unknown"
        };
      });
    } catch (error) {
      console.error("Error details:", {
        message: error.message,
        status: error.status,
        response: error.response
      });
      if (error.status === 401 || error.status === 403) {
        throw new Error("Authentication failed. Please verify:\n1. Your email address is correct\n2. Your API token is correct\n3. You have the necessary permissions");
      }
      throw error;
    }
  }
  async formatTasksAsMarkdown(tasks) {
    return tasks.map((task) => `- [ ] [${task.key}: ${task.summary}](${task.url}) (${task.status})`).join("\n");
  }
};

// src/suggester.ts
var import_obsidian4 = __toModule(require("obsidian"));
var JiraTaskSuggester = class extends import_obsidian4.SuggestModal {
  constructor(app, tasks, onSelect) {
    super(app);
    this.tasks = [];
    this.selectedIndex = 0;
    console.log("JiraTaskSuggester constructor called");
    console.log("Tasks received:", tasks);
    this.tasks = tasks;
    this.onSelect = onSelect;
    this.setPlaceholder("Select a Jira task...");
    this.containerEl.addClass("jira-task-suggester");
    this.modalEl.style.maxWidth = "600px";
    this.modalEl.style.width = "80%";
    this.modalEl.style.top = "30%";
    this.modalEl.style.left = "50%";
    this.modalEl.style.transform = "translate(-50%, -30%)";
    this.modalEl.style.position = "fixed";
    const suggestionsContainer = this.modalEl.querySelector(".suggestion-container");
    if (suggestionsContainer instanceof HTMLElement) {
      suggestionsContainer.style.maxHeight = "400px";
      suggestionsContainer.style.width = "100%";
    }
    this.scope = new import_obsidian4.Scope();
    this.scope.register([], "Escape", () => {
      this.close();
      return false;
    });
    this.scope.register([], "Enter", (evt) => {
      const suggestions = this.getSuggestions(this.inputEl.value);
      if (suggestions && suggestions.length > 0) {
        this.onChooseSuggestion(suggestions[this.selectedIndex], evt);
        return false;
      }
      return true;
    });
    this.scope.register([], "ArrowUp", (evt) => {
      evt.preventDefault();
      this.selectedIndex = Math.max(0, this.selectedIndex - 1);
      this.updateSelectedSuggestion();
      return false;
    });
    this.scope.register([], "ArrowDown", (evt) => {
      evt.preventDefault();
      const suggestions = this.getSuggestions(this.inputEl.value);
      this.selectedIndex = Math.min(((suggestions == null ? void 0 : suggestions.length) || 1) - 1, this.selectedIndex + 1);
      this.updateSelectedSuggestion();
      return false;
    });
    console.log("About to open modal");
    this.open();
  }
  updateSelectedSuggestion() {
    const suggestionElements = this.modalEl.querySelectorAll(".suggestion-container .suggestion-item");
    suggestionElements.forEach((el, index) => {
      if (index === this.selectedIndex) {
        el.addClass("is-selected");
        el.style.backgroundColor = "var(--background-modifier-hover)";
      } else {
        el.removeClass("is-selected");
        el.style.backgroundColor = "transparent";
      }
    });
  }
  open() {
    console.log("Explicitly opening modal");
    super.open();
    this.containerEl.style.display = "block";
    this.containerEl.style.visibility = "visible";
    this.containerEl.style.opacity = "1";
  }
  getSuggestions(query) {
    console.log("Getting suggestions for query:", query);
    const lowerQuery = query.toLowerCase();
    const filteredTasks = this.tasks.filter((task) => task.key.toLowerCase().includes(lowerQuery) || task.summary.toLowerCase().includes(lowerQuery));
    console.log("Filtered tasks:", filteredTasks);
    return filteredTasks;
  }
  renderSuggestion(task, el) {
    console.log("Rendering suggestion for task:", task);
    el.addClass("suggestion-item");
    const container = el.createDiv({ cls: "suggestion-content" });
    container.style.display = "flex";
    container.style.alignItems = "center";
    container.style.gap = "8px";
    const iconContainer = container.createDiv({ cls: "suggestion-icon" });
    iconContainer.innerHTML = `<svg width="16" height="16" viewBox="0 0 128 128" fill="currentColor">
            <path d="M108.023 16H61.805c0 11.52 9.324 20.848 20.847 20.848h8.5v8.226c0 11.52 9.328 20.847 20.848 20.847V19.977A3.98 3.98 0 00108.023 16z"/>
            <path d="M85.121 39.04H38.902c0 11.52 9.324 20.847 20.847 20.847h8.5v8.226c0 11.524 9.328 20.847 20.848 20.847V43.016a3.978 3.978 0 00-3.976-3.977z"/>
            <path d="M62.219 62.078H16c0 11.524 9.324 20.847 20.847 20.847h8.5v8.23c0 11.52 9.328 20.847 20.848 20.847V66.055a3.979 3.979 0 00-3.976-3.977z"/>
        </svg>`;
    iconContainer.style.display = "flex";
    iconContainer.style.alignItems = "center";
    iconContainer.style.color = "var(--text-muted)";
    const textContainer = container.createDiv({ cls: "suggestion-text" });
    const titleEl = textContainer.createDiv({ cls: "suggestion-title" });
    titleEl.setText(`${task.key} - ${task.summary}`);
    titleEl.style.fontWeight = "bold";
    const statusEl = textContainer.createDiv({ cls: "suggestion-description" });
    statusEl.setText(task.status);
    statusEl.style.fontSize = "0.8em";
    statusEl.style.color = "var(--text-muted)";
    el.addEventListener("mouseenter", () => {
      var _a;
      el.addClass("is-selected");
      this.selectedIndex = Array.from(((_a = el.parentElement) == null ? void 0 : _a.children) || []).indexOf(el);
      this.updateSelectedSuggestion();
    });
    el.style.padding = "8px";
    el.style.cursor = "pointer";
    el.style.borderRadius = "4px";
    el.style.transition = "background-color 100ms ease-in-out";
  }
  onChooseSuggestion(task, evt) {
    console.log("Task chosen:", task);
    if (this.onSelect) {
      this.onSelect(task);
    }
    this.close();
  }
};

// src/git.ts
var import_obsidian5 = __toModule(require("obsidian"));
var GitIntegration = class {
  constructor(settings) {
    this.settings = settings;
  }
  getHeaders(isGitLab) {
    return {
      "Authorization": `Bearer ${isGitLab ? this.settings.gitlabToken : this.settings.githubToken}`,
      "Content-Type": "application/json"
    };
  }
  async getLastMergedCommit(repository, isGitLab) {
    try {
      if (isGitLab) {
        const encodedRepo = encodeURIComponent(repository);
        const url = `${this.settings.gitlabUrl}/api/v4/projects/${encodedRepo}/merge_requests?state=merged&order_by=updated_at&sort=desc&per_page=1`;
        const response = await (0, import_obsidian5.requestUrl)({
          url,
          headers: this.getHeaders(true)
        });
        return response.json[0];
      } else {
        const [owner, repo] = repository.split("/");
        const url = `https://api.github.com/repos/${owner}/${repo}/pulls?state=closed&sort=updated&direction=desc&per_page=1`;
        const response = await (0, import_obsidian5.requestUrl)({
          url,
          headers: this.getHeaders(false)
        });
        return response.json[0];
      }
    } catch (error) {
      console.error("Error fetching last merged commit:", error);
      throw error;
    }
  }
  async getPendingMergeRequests(repository, isGitLab) {
    try {
      if (isGitLab) {
        const encodedRepo = encodeURIComponent(repository);
        const url = `${this.settings.gitlabUrl}/api/v4/projects/${encodedRepo}/merge_requests?state=opened`;
        const response = await (0, import_obsidian5.requestUrl)({
          url,
          headers: this.getHeaders(true)
        });
        return response.json;
      } else {
        const [owner, repo] = repository.split("/");
        const url = `https://api.github.com/repos/${owner}/${repo}/pulls?state=open`;
        const response = await (0, import_obsidian5.requestUrl)({
          url,
          headers: this.getHeaders(false)
        });
        return response.json;
      }
    } catch (error) {
      console.error("Error fetching pending merge requests:", error);
      throw error;
    }
  }
  async getAllGitHubPRs() {
    try {
      const reposResponse = await (0, import_obsidian5.requestUrl)({
        url: "https://api.github.com/user/repos?affiliation=owner,collaborator,organization_member&sort=updated",
        headers: this.getHeaders(false)
      });
      const allPRs = await Promise.all(reposResponse.json.map(async (repo) => {
        const response = await (0, import_obsidian5.requestUrl)({
          url: `https://api.github.com/repos/${repo.full_name}/pulls?state=open`,
          headers: this.getHeaders(false)
        });
        return response.json.map((pr) => ({
          ...pr,
          repository: repo.full_name
        }));
      }));
      return allPRs.flat().sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());
    } catch (error) {
      console.error("Error fetching GitHub PRs:", error);
      throw error;
    }
  }
  async getAllGitLabMRs() {
    try {
      const projectsResponse = await (0, import_obsidian5.requestUrl)({
        url: `${this.settings.gitlabUrl}/api/v4/projects?membership=true&sort=desc`,
        headers: this.getHeaders(true)
      });
      const allMRs = await Promise.all(projectsResponse.json.map(async (project) => {
        const response = await (0, import_obsidian5.requestUrl)({
          url: `${this.settings.gitlabUrl}/api/v4/projects/${project.id}/merge_requests?state=opened`,
          headers: this.getHeaders(true)
        });
        return response.json.map((mr) => ({
          ...mr,
          repository: project.path_with_namespace
        }));
      }));
      return allMRs.flat().sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());
    } catch (error) {
      console.error("Error fetching GitLab MRs:", error);
      throw error;
    }
  }
  getSettings() {
    return this.settings;
  }
};

// src/gitSuggester.ts
var import_obsidian6 = __toModule(require("obsidian"));
var GitMergeRequestSuggester = class extends import_obsidian6.SuggestModal {
  constructor(app, inputEl, gitIntegration, suggestions, onChoose) {
    super(app);
    this.suggestions = [];
    this.loading = false;
    this.selectedIndex = 0;
    console.log("GitMergeRequestSuggester constructor called");
    this.gitIntegration = gitIntegration;
    this.inputEl = inputEl;
    if (suggestions) {
      this.suggestions = suggestions;
    }
    this.onChoose = onChoose;
    this.setPlaceholder("Search pull requests...");
    this.containerEl.addClass("git-mr-suggester");
    this.modalEl.style.maxWidth = "600px";
    this.modalEl.style.width = "80%";
    this.modalEl.style.top = "30%";
    this.modalEl.style.left = "50%";
    this.modalEl.style.transform = "translate(-50%, -30%)";
    this.modalEl.style.position = "fixed";
    const suggestionsContainer = this.modalEl.querySelector(".suggestion-container");
    if (suggestionsContainer instanceof HTMLElement) {
      suggestionsContainer.style.maxHeight = "400px";
      suggestionsContainer.style.width = "100%";
      suggestionsContainer.style.border = "1px solid var(--background-modifier-border)";
      suggestionsContainer.style.borderRadius = "4px";
      suggestionsContainer.style.overflow = "auto";
    }
    const inputContainer = this.modalEl.querySelector(".prompt");
    if (inputContainer instanceof HTMLElement) {
      inputContainer.style.border = "1px solid var(--background-modifier-border)";
      inputContainer.style.borderRadius = "4px";
      inputContainer.style.margin = "0 0 8px 0";
    }
    const input = this.modalEl.querySelector(".prompt-input");
    if (input instanceof HTMLElement) {
      input.style.width = "100%";
      input.style.padding = "8px 12px";
      input.style.border = "none";
      input.style.background = "var(--background-primary)";
    }
    this.scope = new import_obsidian6.Scope();
    this.scope.register([], "Escape", () => {
      this.close();
      return false;
    });
    this.scope.register([], "Enter", async (evt) => {
      const suggestions2 = await this.getSuggestions(this.inputEl.value);
      if (suggestions2 && suggestions2.length > 0) {
        this.onChooseSuggestion(suggestions2[this.selectedIndex], evt);
        return false;
      }
      return true;
    });
    this.scope.register([], "ArrowUp", async (evt) => {
      evt.preventDefault();
      this.selectedIndex = Math.max(0, this.selectedIndex - 1);
      this.updateSelectedSuggestion();
      return false;
    });
    this.scope.register([], "ArrowDown", async (evt) => {
      evt.preventDefault();
      const suggestions2 = await this.getSuggestions(this.inputEl.value);
      this.selectedIndex = Math.min(((suggestions2 == null ? void 0 : suggestions2.length) || 1) - 1, this.selectedIndex + 1);
      this.updateSelectedSuggestion();
      return false;
    });
    console.log("About to open modal");
    this.open();
  }
  updateSelectedSuggestion() {
    const suggestionElements = this.modalEl.querySelectorAll(".suggestion-container .suggestion-item");
    suggestionElements.forEach((el, index) => {
      if (index === this.selectedIndex) {
        el.addClass("is-selected");
        el.scrollIntoView({ block: "nearest" });
      } else {
        el.removeClass("is-selected");
      }
    });
  }
  async getSuggestions(query) {
    if (this.loading)
      return this.suggestions;
    try {
      this.loading = true;
      const searchStr = query.toLowerCase();
      const filteredSuggestions = this.suggestions.filter((mr) => {
        var _a, _b, _c, _d;
        return mr.title.toLowerCase().includes(searchStr) || ((_a = mr.description) == null ? void 0 : _a.toLowerCase().includes(searchStr)) || (mr.web_url || mr.html_url || "").toLowerCase().includes(searchStr) || ((_b = mr.author.name) == null ? void 0 : _b.toLowerCase().includes(searchStr)) || ((_c = mr.author.login) == null ? void 0 : _c.toLowerCase().includes(searchStr)) || ((_d = mr.author.username) == null ? void 0 : _d.toLowerCase().includes(searchStr));
      });
      return filteredSuggestions;
    } catch (error) {
      console.error("Error filtering suggestions:", error);
      return [];
    } finally {
      this.loading = false;
    }
  }
  onChooseSuggestion(result, evt) {
    if (this.onChoose) {
      this.onChoose(result);
    }
    this.close();
  }
  renderSuggestion(result, el) {
    var _a, _b, _c, _d;
    el.addClass("suggestion-item");
    const container = el.createDiv({ cls: "suggestion-content" });
    container.style.display = "flex";
    container.style.alignItems = "center";
    container.style.gap = "8px";
    const iconContainer = container.createDiv({ cls: "suggestion-icon" });
    if ((_a = result.web_url) == null ? void 0 : _a.includes("gitlab")) {
      iconContainer.innerHTML = `<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                <path d="M15.97 9.058l-.895-2.756L13.3.842c-.09-.282-.488-.282-.58 0L10.946 6.3H5.054L3.28.842c-.09-.282-.488-.282-.58 0L.924 6.302.03 9.058c-.082.25.008.526.22.682l7.75 5.63 7.75-5.63c.212-.156.302-.43.22-.682"/>
            </svg>`;
    } else {
      iconContainer.innerHTML = `<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8"/>
            </svg>`;
    }
    iconContainer.style.display = "flex";
    iconContainer.style.alignItems = "center";
    iconContainer.style.color = "var(--text-muted)";
    const textContainer = container.createDiv({ cls: "suggestion-text" });
    const titleEl = textContainer.createDiv({ cls: "suggestion-title" });
    titleEl.setText(result.title);
    titleEl.style.fontWeight = "bold";
    const descEl = textContainer.createDiv({ cls: "suggestion-description" });
    descEl.setText(`#${result.number || ""} by ${((_b = result.author) == null ? void 0 : _b.name) || ((_c = result.author) == null ? void 0 : _c.username) || ((_d = result.author) == null ? void 0 : _d.login) || "Unknown"}`);
    descEl.style.fontSize = "0.8em";
    descEl.style.color = "var(--text-muted)";
  }
};

// src/main.ts
var EmojiChecklistPlugin = class extends import_obsidian7.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Plugin loaded with settings:", this.settings);
    this.registerEvent(this.app.workspace.on("editor-change", (editor) => {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.slice(0, cursor.ch);
      const triggerWord = this.settings.jiraSettings.triggerWord;
      console.log("Checking for trigger:", {
        triggerWord,
        beforeCursor,
        endsWith: beforeCursor.endsWith(triggerWord),
        enabled: this.settings.jiraSettings.enabled
      });
      if (beforeCursor.endsWith(triggerWord)) {
        console.log("Trigger word detected, handling Jira trigger");
        this.handleJiraTrigger(editor);
      }
    }));
    this.addCommand({
      id: "insert-jira-issue",
      name: "Insert Jira Issue",
      checkCallback: (checking) => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
        if (!view)
          return false;
        if (!checking) {
          this.insertJiraIssue(view);
        }
        return true;
      }
    });
    this.registerMarkdownPostProcessor(processCheckboxes.bind(this));
    this.addSettingTab(new EmojiChecklistSettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor) => {
      if (editor.getSelection()) {
        menu.addItem((item) => {
          item.setTitle("Copy as Formatted Report").setIcon("clipboard-copy").onClick(() => this.formatAndCopyToClipboard(editor));
        });
      }
    }));
    this.addCommand({
      id: "view-github-prs",
      name: "View GitHub Pull Requests",
      checkCallback: (checking) => {
        if (!this.settings.gitSettings.githubToken)
          return false;
        if (!checking) {
          this.viewGitHubPRs();
        }
        return true;
      }
    });
    this.addCommand({
      id: "view-gitlab-mrs",
      name: "View GitLab Merge Requests",
      checkCallback: (checking) => {
        if (!this.settings.gitSettings.gitlabToken || !this.settings.gitSettings.gitlabUrl)
          return false;
        if (!checking) {
          this.viewGitLabMRs();
        }
        return true;
      }
    });
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor) => {
      menu.addItem((item) => {
        item.setTitle("Git Integration").setIcon("git-pull-request").onClick(() => {
          const gitMenu = new import_obsidian7.Modal(this.app);
          if (this.settings.gitSettings.githubToken) {
            gitMenu.contentEl.createEl("button", {
              text: "View GitHub Pull Requests",
              cls: "git-result-item",
              attr: { "data-url": "github" }
            }).addEventListener("click", () => {
              this.viewGitHubPRs();
            });
          }
          if (this.settings.gitSettings.gitlabToken && this.settings.gitSettings.gitlabUrl) {
            gitMenu.contentEl.createEl("button", {
              text: "View GitLab Merge Requests",
              cls: "git-result-item",
              attr: { "data-url": "gitlab" }
            }).addEventListener("click", () => {
              this.viewGitLabMRs();
            });
          }
          gitMenu.open();
        });
      });
    }));
  }
  formatAndCopyToClipboard(editor) {
    const selectedText = editor.getSelection();
    if (!selectedText) {
      new import_obsidian7.Notice("No text selected");
      return;
    }
    if (!this.settings.reportSettings.enabled) {
      new import_obsidian7.Notice("Report feature is disabled in settings");
      return;
    }
    const getEmoji = (line, isChecked) => {
      for (const mapping of this.settings.tagMappings) {
        if (line.toLowerCase().includes(`#${mapping.tag.toLowerCase()}`)) {
          return isChecked ? mapping.checkedEmoji : mapping.uncheckedEmoji;
        }
      }
      return isChecked ? this.settings.checkedEmoji : this.settings.uncheckedEmoji;
    };
    const lines = selectedText.split("\n");
    const processLine = (line) => {
      line = line.trim();
      if (line.startsWith("- [x]")) {
        return line.replace("- [x]", getEmoji(line, true));
      } else if (line.startsWith("- [ ]")) {
        return line.replace("- [ ]", getEmoji(line, false));
      }
      return line;
    };
    const tasks = lines.filter((line) => line.trim().length > 0).map(processLine);
    const stoppers = lines.filter((line) => line.toLowerCase().includes("#stopper")).map(processLine);
    const today = new Date().toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric"
    });
    const contentParts = [];
    for (const section of this.settings.reportSettings.sections) {
      if (!section.enabled)
        continue;
      if (this.settings.reportSettings.showHeaders && section.showHeader) {
        contentParts.push(`### ${section.name}`);
      }
      let sectionContent = section.content;
      switch (section.name) {
        case "DATE":
          sectionContent = `\u{1F4C5} ${today}`;
          break;
        case "BODY":
          sectionContent = tasks.filter((task) => !task.toLowerCase().includes("#stopper")).join("\n");
          break;
        case "STOPPERS":
          sectionContent = stoppers.join("\n");
          break;
      }
      if (sectionContent) {
        contentParts.push(sectionContent);
        contentParts.push("");
      }
    }
    const formattedContent = contentParts.join("\n");
    navigator.clipboard.writeText(formattedContent).then(() => {
      new import_obsidian7.Notice("Formatted content copied to clipboard");
    }).catch(() => {
      new import_obsidian7.Notice("Failed to copy to clipboard");
    });
  }
  async insertJiraIssue(view) {
    if (!this.settings.jiraSettings.enabled) {
      new import_obsidian7.Notice("Please enable and configure Jira integration in settings first");
      return;
    }
    try {
      const jiraClient = new JiraClient(this.settings.jiraSettings);
      const tasks = await jiraClient.searchTasks("my tasks");
      if (tasks.length === 0) {
        new import_obsidian7.Notice("No Jira tasks found assigned to you");
        return;
      }
      new JiraTaskSuggester(this.app, tasks, (selectedTask) => {
        const cursor = view.editor.getCursor();
        const taskMarkdown = `- [ ] [${selectedTask.key}: ${selectedTask.summary}](${selectedTask.url}) (${selectedTask.status})`;
        view.editor.replaceRange(taskMarkdown + "\n", cursor, cursor);
        view.editor.setCursor({
          line: cursor.line + 1,
          ch: 0
        });
      });
    } catch (error) {
      console.error("Error fetching Jira tasks:", error);
      new import_obsidian7.Notice(error.message || "Error fetching Jira tasks");
    }
  }
  async handleJiraTrigger(_editor) {
    console.log("handleJiraTrigger called");
    if (!this.settings.jiraSettings.enabled) {
      console.log("Jira integration not enabled");
      new import_obsidian7.Notice("Please enable and configure Jira integration in settings first");
      return;
    }
    try {
      console.log("Creating Jira client with settings:", this.settings.jiraSettings);
      const jiraClient = new JiraClient(this.settings.jiraSettings);
      console.log("Fetching tasks...");
      const tasks = await jiraClient.searchTasks("my tasks");
      console.log("Fetched tasks:", tasks);
      if (tasks.length === 0) {
        console.log("No tasks found");
        new import_obsidian7.Notice("No Jira tasks found assigned to you");
        return;
      }
      console.log("Opening task suggester with", tasks.length, "tasks");
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
      if (!activeView) {
        console.error("No active markdown view");
        new import_obsidian7.Notice("Please open a markdown note first");
        return;
      }
      try {
        const suggester = new JiraTaskSuggester(this.app, tasks, (selectedTask) => {
          console.log("Task selected:", selectedTask);
          const editor = activeView.editor;
          const cursor = editor.getCursor();
          const triggerWord = this.settings.jiraSettings.triggerWord;
          const currentLine = editor.getLine(cursor.line);
          const newLine = currentLine.slice(0, cursor.ch - triggerWord.length) + `[${selectedTask.key}: ${selectedTask.summary}](${selectedTask.url}) (${selectedTask.status})` + currentLine.slice(cursor.ch);
          editor.setLine(cursor.line, newLine);
          editor.setCursor({
            line: cursor.line,
            ch: cursor.ch - triggerWord.length + `[${selectedTask.key}: ${selectedTask.summary}](${selectedTask.url}) (${selectedTask.status})`.length
          });
        });
        console.log("Suggester created:", suggester);
      } catch (suggesterError) {
        console.error("Error creating suggester:", suggesterError);
        new import_obsidian7.Notice("Failed to create task suggester");
      }
    } catch (error) {
      console.error("Error in handleJiraTrigger:", error);
      new import_obsidian7.Notice(error.message || "Error fetching Jira tasks");
    }
  }
  async viewGitHubPRs() {
    try {
      const gitIntegration = new GitIntegration(this.settings.gitSettings);
      const prs = await gitIntegration.getAllGitHubPRs();
      if (!prs || prs.length === 0) {
        new import_obsidian7.Notice("No open pull requests found");
        return;
      }
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
      if (!activeView) {
        new import_obsidian7.Notice("No active markdown view");
        return;
      }
      new GitMergeRequestSuggester(this.app, document.createElement("input"), gitIntegration, prs, (selectedPR) => {
        const editor = activeView.editor;
        const linkText = `[${selectedPR.title}](${selectedPR.html_url || selectedPR.web_url})`;
        editor.replaceSelection(linkText);
        new import_obsidian7.Notice("Pull request link inserted");
      });
    } catch (error) {
      new import_obsidian7.Notice("Error fetching GitHub PRs: " + error.message);
      console.error("Error fetching GitHub PRs:", error);
    }
  }
  async viewGitLabMRs() {
    try {
      const gitIntegration = new GitIntegration(this.settings.gitSettings);
      const mrs = await gitIntegration.getAllGitLabMRs();
      if (!mrs || mrs.length === 0) {
        new import_obsidian7.Notice("No open merge requests found");
        return;
      }
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
      if (!activeView) {
        new import_obsidian7.Notice("No active markdown view");
        return;
      }
      new GitMergeRequestSuggester(this.app, document.createElement("input"), gitIntegration, mrs, (selectedMR) => {
        const editor = activeView.editor;
        const linkText = `[${selectedMR.title}](${selectedMR.html_url || selectedMR.web_url})`;
        editor.replaceSelection(linkText);
        new import_obsidian7.Notice("Merge request link inserted");
      });
    } catch (error) {
      new import_obsidian7.Notice("Error fetching GitLab MRs: " + error.message);
      console.error("Error fetching GitLab MRs:", error);
    }
  }
  async promptForRepository(type = "github") {
    return new Promise((resolve) => {
      const gitIntegration = new GitIntegration(this.settings.gitSettings);
      const inputEl = document.createElement("input");
      inputEl.type = "text";
      inputEl.placeholder = type === "github" ? "Search GitHub pull requests..." : "Search GitLab merge requests...";
      new GitMergeRequestSuggester(this.app, inputEl, gitIntegration, void 0, (selectedPR) => {
        const repoUrl = selectedPR.web_url || selectedPR.html_url || "";
        try {
          const urlObj = new URL(repoUrl);
          const pathParts = urlObj.pathname.split("/");
          resolve(`${pathParts[1]}/${pathParts[2]}`);
        } catch (error) {
          console.error("Error extracting repo path:", error);
          resolve(null);
        }
      });
    });
  }
  async loadSettings() {
    const loadedData = await this.loadData();
    console.log("Loaded data:", loadedData);
    this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData);
    console.log("Merged settings:", this.settings);
  }
  async saveSettings() {
    console.log("Saving settings:", this.settings);
    await this.saveData(this.settings);
  }
  refreshAllNotes() {
    this.app.workspace.trigger("markdown-preview-refresh");
    this.app.workspace.iterateAllLeaves((leaf) => {
      var _a;
      if (leaf.view.getViewType() === "markdown") {
        (_a = leaf.view.previewMode) == null ? void 0 : _a.rerender(true);
      }
    });
    new import_obsidian7.Notice("Applied emoji changes to all notes");
  }
};
//# sourceMappingURL=data:application/json;base64,
