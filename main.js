/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => EmojiChecklistPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/types.ts
var DEFAULT_SETTINGS = {
  uncheckedEmoji: "\u2B55",
  checkedEmoji: "\u2705"
};

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var EmojiChecklistSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Emoji Checklist Settings" });
    new import_obsidian.Setting(containerEl).setName("Unchecked emoji").setDesc("Emoji to display for unchecked items").addText((text) => text.setPlaceholder("Enter emoji").setValue(this.plugin.settings.uncheckedEmoji).onChange(async (value) => {
      this.plugin.settings.uncheckedEmoji = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Checked emoji").setDesc("Emoji to display for checked items").addText((text) => text.setPlaceholder("Enter emoji").setValue(this.plugin.settings.checkedEmoji).onChange(async (value) => {
      this.plugin.settings.checkedEmoji = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/processor.ts
var processCheckboxes = function(el) {
  const checkboxes = el.querySelectorAll(".task-list-item-checkbox");
  checkboxes.forEach((checkbox) => {
    if (checkbox instanceof HTMLInputElement) {
      const span = document.createElement("span");
      span.textContent = checkbox.checked ? this.settings.checkedEmoji : this.settings.uncheckedEmoji;
      span.addEventListener("click", (e) => {
        e.preventDefault();
        checkbox.click();
        span.textContent = checkbox.checked ? this.settings.checkedEmoji : this.settings.uncheckedEmoji;
      });
      checkbox.style.display = "none";
      checkbox.after(span);
    }
  });
};

// src/main.ts
var EmojiChecklistPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerMarkdownPostProcessor(processCheckboxes.bind(this));
    this.addSettingTab(new EmojiChecklistSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3R5cGVzLnRzIiwgInNyYy9zZXR0aW5ncy50cyIsICJzcmMvcHJvY2Vzc29yLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBFbW9qaUNoZWNrbGlzdFNldHRpbmdzLCBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBFbW9qaUNoZWNrbGlzdFNldHRpbmdUYWIgfSBmcm9tICcuL3NldHRpbmdzJztcbmltcG9ydCB7IHByb2Nlc3NDaGVja2JveGVzIH0gZnJvbSAnLi9wcm9jZXNzb3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbW9qaUNoZWNrbGlzdFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IEVtb2ppQ2hlY2tsaXN0U2V0dGluZ3M7XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IocHJvY2Vzc0NoZWNrYm94ZXMuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgRW1vamlDaGVja2xpc3RTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxufSIsICJleHBvcnQgaW50ZXJmYWNlIEVtb2ppQ2hlY2tsaXN0U2V0dGluZ3Mge1xuICAgIHVuY2hlY2tlZEVtb2ppOiBzdHJpbmc7XG4gICAgY2hlY2tlZEVtb2ppOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBFbW9qaUNoZWNrbGlzdFNldHRpbmdzID0ge1xuICAgIHVuY2hlY2tlZEVtb2ppOiAnXHUyQjU1JyxcbiAgICBjaGVja2VkRW1vamk6ICdcdTI3MDUnXG59OyIsICJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgdHlwZSBFbW9qaUNoZWNrbGlzdFBsdWdpbiBmcm9tICcuL21haW4nO1xuXG5leHBvcnQgY2xhc3MgRW1vamlDaGVja2xpc3RTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBFbW9qaUNoZWNrbGlzdFBsdWdpbjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEVtb2ppQ2hlY2tsaXN0UGx1Z2luKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdFbW9qaSBDaGVja2xpc3QgU2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1VuY2hlY2tlZCBlbW9qaScpXG4gICAgICAgICAgICAuc2V0RGVzYygnRW1vamkgdG8gZGlzcGxheSBmb3IgdW5jaGVja2VkIGl0ZW1zJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgZW1vamknKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy51bmNoZWNrZWRFbW9qaSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnVuY2hlY2tlZEVtb2ppID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdDaGVja2VkIGVtb2ppJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdFbW9qaSB0byBkaXNwbGF5IGZvciBjaGVja2VkIGl0ZW1zJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgZW1vamknKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGVja2VkRW1vamkpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGVja2VkRW1vamkgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgIH1cbn0iLCAiaW1wb3J0IHR5cGUgeyBNYXJrZG93blBvc3RQcm9jZXNzb3IgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgdHlwZSBFbW9qaUNoZWNrbGlzdFBsdWdpbiBmcm9tICcuL21haW4nO1xuXG5leHBvcnQgY29uc3QgcHJvY2Vzc0NoZWNrYm94ZXM6IE1hcmtkb3duUG9zdFByb2Nlc3NvciA9IGZ1bmN0aW9uKHRoaXM6IEVtb2ppQ2hlY2tsaXN0UGx1Z2luLCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBjaGVja2JveGVzID0gZWwucXVlcnlTZWxlY3RvckFsbCgnLnRhc2stbGlzdC1pdGVtLWNoZWNrYm94Jyk7XG4gICAgXG4gICAgY2hlY2tib3hlcy5mb3JFYWNoKChjaGVja2JveDogRWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAoY2hlY2tib3ggaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IGNoZWNrYm94LmNoZWNrZWQgPyB0aGlzLnNldHRpbmdzLmNoZWNrZWRFbW9qaSA6IHRoaXMuc2V0dGluZ3MudW5jaGVja2VkRW1vamk7XG5cbiAgICAgICAgICAgIHNwYW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjaGVja2JveC5jbGljaygpO1xuICAgICAgICAgICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBjaGVja2JveC5jaGVja2VkID8gdGhpcy5zZXR0aW5ncy5jaGVja2VkRW1vamkgOiB0aGlzLnNldHRpbmdzLnVuY2hlY2tlZEVtb2ppO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNoZWNrYm94LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBjaGVja2JveC5hZnRlcihzcGFuKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTsiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQUF1Qjs7O0FDS2hCLElBQU0sbUJBQTJDO0FBQUEsRUFDcEQsZ0JBQWdCO0FBQUEsRUFDaEIsY0FBYztBQUFBOzs7QUNQbEIsc0JBQStDO0FBR3hDLDZDQUF1QyxpQ0FBaUI7QUFBQSxFQUczRCxZQUFZLEtBQVUsUUFBOEI7QUFDaEQsVUFBTSxLQUFLO0FBQ1gsU0FBSyxTQUFTO0FBQUE7QUFBQSxFQUdsQixVQUFnQjtBQUNaLFVBQU0sRUFBRSxnQkFBZ0I7QUFDeEIsZ0JBQVk7QUFFWixnQkFBWSxTQUFTLE1BQU0sRUFBRSxNQUFNO0FBRW5DLFFBQUksd0JBQVEsYUFDUCxRQUFRLG1CQUNSLFFBQVEsd0NBQ1IsUUFBUSxVQUFRLEtBQ1osZUFBZSxlQUNmLFNBQVMsS0FBSyxPQUFPLFNBQVMsZ0JBQzlCLFNBQVMsT0FBTyxVQUFVO0FBQ3ZCLFdBQUssT0FBTyxTQUFTLGlCQUFpQjtBQUN0QyxZQUFNLEtBQUssT0FBTztBQUFBO0FBRzlCLFFBQUksd0JBQVEsYUFDUCxRQUFRLGlCQUNSLFFBQVEsc0NBQ1IsUUFBUSxVQUFRLEtBQ1osZUFBZSxlQUNmLFNBQVMsS0FBSyxPQUFPLFNBQVMsY0FDOUIsU0FBUyxPQUFPLFVBQVU7QUFDdkIsV0FBSyxPQUFPLFNBQVMsZUFBZTtBQUNwQyxZQUFNLEtBQUssT0FBTztBQUFBO0FBQUE7QUFBQTs7O0FDakMvQixJQUFNLG9CQUEyQyxTQUFxQyxJQUFpQjtBQUMxRyxRQUFNLGFBQWEsR0FBRyxpQkFBaUI7QUFFdkMsYUFBVyxRQUFRLENBQUMsYUFBc0I7QUFDdEMsUUFBSSxvQkFBb0Isa0JBQWtCO0FBQ3RDLFlBQU0sT0FBTyxTQUFTLGNBQWM7QUFDcEMsV0FBSyxjQUFjLFNBQVMsVUFBVSxLQUFLLFNBQVMsZUFBZSxLQUFLLFNBQVM7QUFFakYsV0FBSyxpQkFBaUIsU0FBUyxDQUFDLE1BQU07QUFDbEMsVUFBRTtBQUNGLGlCQUFTO0FBQ1QsYUFBSyxjQUFjLFNBQVMsVUFBVSxLQUFLLFNBQVMsZUFBZSxLQUFLLFNBQVM7QUFBQTtBQUdyRixlQUFTLE1BQU0sVUFBVTtBQUN6QixlQUFTLE1BQU07QUFBQTtBQUFBO0FBQUE7OztBSGIzQix5Q0FBa0Qsd0JBQU87QUFBQSxRQUcvQyxTQUFTO0FBQ1gsVUFBTSxLQUFLO0FBQ1gsU0FBSyw4QkFBOEIsa0JBQWtCLEtBQUs7QUFDMUQsU0FBSyxjQUFjLElBQUkseUJBQXlCLEtBQUssS0FBSztBQUFBO0FBQUEsUUFHeEQsZUFBZTtBQUNqQixTQUFLLFdBQVcsT0FBTyxPQUFPLElBQUksa0JBQWtCLE1BQU0sS0FBSztBQUFBO0FBQUEsUUFHN0QsZUFBZTtBQUNqQixVQUFNLEtBQUssU0FBUyxLQUFLO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
