/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => EmojiChecklistPlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/types.ts
var DEFAULT_SETTINGS = {
  checkedEmoji: "\u2705",
  uncheckedEmoji: "\u2B1C\uFE0F",
  tagMappings: [
    {
      tag: "stopper",
      uncheckedEmoji: "\u{1F6D1}",
      checkedEmoji: "\u2705"
    }
  ]
};

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var EmojiChecklistSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  updateTestSection() {
    if (this.testEl) {
      this.testEl.empty();
      const header = this.testEl.createEl("h3", { text: "Live Preview" });
      const uncheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
      uncheckedExample.createEl("span", { text: "Unchecked example: " });
      const uncheckedContainer = uncheckedExample.createEl("span", { cls: "task-preview" });
      uncheckedContainer.createEl("span", {
        text: this.plugin.settings.uncheckedEmoji,
        cls: "emoji-preview"
      });
      uncheckedContainer.createEl("span", { text: " Sample task" });
      const checkedExample = this.testEl.createEl("div", { cls: "setting-item" });
      checkedExample.createEl("span", { text: "Checked example: " });
      const checkedContainer = checkedExample.createEl("span", { cls: "task-preview" });
      checkedContainer.createEl("span", {
        text: this.plugin.settings.checkedEmoji,
        cls: "emoji-preview"
      });
      const checkedText = checkedContainer.createEl("span", { text: " Sample task" });
      checkedText.style.textDecoration = "line-through";
      checkedText.style.color = "var(--text-muted)";
      if (this.plugin.settings.tagMappings.length > 0) {
        const tagHeader = this.testEl.createEl("h3", { text: "Tag Examples" });
        tagHeader.style.marginTop = "2em";
        tagHeader.style.marginBottom = "1em";
        for (const mapping of this.plugin.settings.tagMappings) {
          const tagUncheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
          tagUncheckedExample.createEl("span", { text: `#${mapping.tag} unchecked: ` });
          const tagUncheckedContainer = tagUncheckedExample.createEl("span", { cls: "task-preview" });
          tagUncheckedContainer.createEl("span", {
            text: mapping.uncheckedEmoji,
            cls: "emoji-preview"
          });
          tagUncheckedContainer.createEl("span", { text: ` Sample #${mapping.tag} task` });
          const tagCheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
          tagCheckedExample.createEl("span", { text: `#${mapping.tag} checked: ` });
          const tagCheckedContainer = tagCheckedExample.createEl("span", { cls: "task-preview" });
          tagCheckedContainer.createEl("span", {
            text: mapping.checkedEmoji,
            cls: "emoji-preview"
          });
          const tagCheckedText = tagCheckedContainer.createEl("span", { text: ` Sample #${mapping.tag} task` });
          tagCheckedText.style.textDecoration = "line-through";
          tagCheckedText.style.color = "var(--text-muted)";
          tagUncheckedExample.style.marginBottom = "0.5em";
          tagCheckedExample.style.marginBottom = "0.5em";
        }
      }
      header.style.marginTop = "2em";
      header.style.marginBottom = "1em";
      uncheckedExample.style.marginBottom = "0.5em";
      checkedExample.style.marginBottom = "0.5em";
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Emoji Checklist Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Unchecked Emoji").setDesc("Emoji to display for unchecked tasks").addText((text) => text.setValue(this.plugin.settings.uncheckedEmoji).onChange(async (value) => {
      this.plugin.settings.uncheckedEmoji = value;
      await this.plugin.saveSettings();
      this.updateTestSection();
      console.log("Updated default unchecked emoji:", this.plugin.settings.uncheckedEmoji);
    }));
    new import_obsidian.Setting(containerEl).setName("Default Checked Emoji").setDesc("Emoji to display for checked tasks").addText((text) => text.setValue(this.plugin.settings.checkedEmoji).onChange(async (value) => {
      this.plugin.settings.checkedEmoji = value;
      await this.plugin.saveSettings();
      this.updateTestSection();
      console.log("Updated default checked emoji:", this.plugin.settings.checkedEmoji);
    }));
    containerEl.createEl("h3", { text: "Tag Mappings" });
    const tagMappingsContainer = containerEl.createDiv("tag-mappings");
    this.plugin.settings.tagMappings.forEach((mapping, index) => {
      const mappingContainer = tagMappingsContainer.createDiv("tag-mapping");
      new import_obsidian.Setting(mappingContainer).setName(`Tag #${mapping.tag}`).addText((text) => text.setPlaceholder("tag name").setValue(mapping.tag).onChange(async (value) => {
        this.plugin.settings.tagMappings[index].tag = value;
        await this.plugin.saveSettings();
        this.updateTestSection();
        console.log("Updated tag mapping:", this.plugin.settings.tagMappings);
      })).addText((text) => text.setPlaceholder("unchecked emoji").setValue(mapping.uncheckedEmoji).onChange(async (value) => {
        this.plugin.settings.tagMappings[index].uncheckedEmoji = value;
        await this.plugin.saveSettings();
        this.updateTestSection();
        console.log("Updated tag mapping:", this.plugin.settings.tagMappings);
      })).addText((text) => text.setPlaceholder("checked emoji").setValue(mapping.checkedEmoji).onChange(async (value) => {
        this.plugin.settings.tagMappings[index].checkedEmoji = value;
        await this.plugin.saveSettings();
        this.updateTestSection();
        console.log("Updated tag mapping:", this.plugin.settings.tagMappings);
      })).addButton((button) => button.setIcon("trash").onClick(async () => {
        this.plugin.settings.tagMappings.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
        console.log("Removed tag mapping, remaining:", this.plugin.settings.tagMappings);
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Add Tag Mapping").setDesc("Add a new tag-emoji mapping").addButton((button) => button.setButtonText("Add New Tag").onClick(async () => {
      this.plugin.settings.tagMappings.push({
        tag: "newtag",
        uncheckedEmoji: "\u2B55",
        checkedEmoji: "\u2705"
      });
      await this.plugin.saveSettings();
      console.log("Added new tag mapping:", this.plugin.settings.tagMappings);
      this.display();
    }));
    new import_obsidian.Setting(containerEl).setName("Reset Settings").setDesc("Restore all settings to their defaults").addButton((button) => button.setButtonText("Restore Defaults").onClick(async () => {
      this.plugin.settings = Object.assign({}, DEFAULT_SETTINGS);
      await this.plugin.saveSettings();
      console.log("Reset settings to defaults:", this.plugin.settings);
      this.display();
      new import_obsidian.Notice("Settings restored to defaults");
    }));
    new import_obsidian.Setting(containerEl).setName("Apply Changes").setDesc("Apply emoji changes to all open notes").addButton((button) => button.setButtonText("Apply Changes").onClick(() => {
      this.plugin.refreshAllNotes();
    }));
    this.testEl = containerEl.createDiv();
    this.updateTestSection();
  }
};

// src/processor.ts
var import_obsidian2 = __toModule(require("obsidian"));
var EmojiRenderChild = class extends import_obsidian2.MarkdownRenderChild {
  constructor(span) {
    super(span);
    this.span = span;
  }
  onunload() {
  }
};
var CheckboxProcessor = class {
  static findTagInLine(listItem) {
    const text = listItem.textContent || "";
    const tagMatch = text.replace(/^[^\w\s#]*\s*/, "").match(/#(\w+)/);
    return tagMatch ? tagMatch[1] : null;
  }
  static getEmojisForTag(plugin, tag, isChecked) {
    if (tag) {
      const mapping = plugin.settings.tagMappings.find((m) => m.tag.toLowerCase() === tag.toLowerCase());
      if (mapping) {
        return isChecked ? mapping.checkedEmoji : mapping.uncheckedEmoji;
      }
    }
    return isChecked ? plugin.settings.checkedEmoji : plugin.settings.uncheckedEmoji;
  }
  static updateEditorContent(editor, lineIndex, newEmoji) {
    const lineText = editor.getLine(lineIndex);
    const newText = lineText.replace(/^[^\w\s#]*\s*/, `${newEmoji} `);
    const change = {
      from: { line: lineIndex, ch: 0 },
      to: { line: lineIndex, ch: lineText.length },
      text: newText
    };
    editor.transaction({ changes: [change] });
  }
  static createEmojiSpan(emoji) {
    const span = document.createElement("span");
    span.className = "task-list-emoji";
    span.textContent = emoji;
    return span;
  }
  static styleContainer(container) {
    if (container) {
      container.style.display = "flex";
      container.style.alignItems = "center";
      container.style.gap = "0.5em";
    }
  }
  static processCheckbox(plugin, checkbox, index, editor, sectionInfo, ctx) {
    const listItem = checkbox.closest("li.task-list-item");
    if (!listItem)
      return;
    const tag = this.findTagInLine(listItem);
    const emoji = this.getEmojisForTag(plugin, tag, checkbox.checked);
    const span = this.createEmojiSpan(emoji);
    if (editor && sectionInfo) {
      this.updateEditorContent(editor, sectionInfo.lineStart + index, emoji);
    }
    this.setupEventListeners(plugin, checkbox, span, tag, index, editor, sectionInfo, ctx);
    this.styleContainer(checkbox.parentElement);
    checkbox.style.display = "none";
    checkbox.after(span);
  }
  static setupEventListeners(plugin, checkbox, span, tag, index, editor, sectionInfo, ctx) {
    const updateEmoji = (isChecked) => {
      const newEmoji = this.getEmojisForTag(plugin, tag, isChecked);
      span.textContent = newEmoji;
      if (editor && sectionInfo) {
        this.updateEditorContent(editor, sectionInfo.lineStart + index, newEmoji);
      }
    };
    span.addEventListener("click", async (e) => {
      e.preventDefault();
      e.stopPropagation();
      checkbox.checked = !checkbox.checked;
      updateEmoji(checkbox.checked);
      checkbox.dispatchEvent(new Event("change", { bubbles: true }));
      if (ctx.sourcePath) {
        ctx.addChild(new EmojiRenderChild(span));
      }
    });
    checkbox.addEventListener("change", () => {
      updateEmoji(checkbox.checked);
    });
  }
};
var processCheckboxes = function(el, ctx) {
  const checkboxes = el.querySelectorAll('li.task-list-item input[type="checkbox"]');
  const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
  const editor = view == null ? void 0 : view.editor;
  const sectionInfo = ctx.getSectionInfo(el);
  checkboxes.forEach((checkbox, index) => {
    if (!(checkbox instanceof HTMLInputElement))
      return;
    CheckboxProcessor.processCheckbox(this, checkbox, index, editor, sectionInfo, ctx);
  });
};

// src/main.ts
var EmojiChecklistPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Plugin loaded with settings:", this.settings);
    this.registerMarkdownPostProcessor(processCheckboxes.bind(this));
    this.addSettingTab(new EmojiChecklistSettingTab(this.app, this));
  }
  async loadSettings() {
    const loadedData = await this.loadData();
    console.log("Loaded data:", loadedData);
    this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData);
    console.log("Merged settings:", this.settings);
  }
  async saveSettings() {
    console.log("Saving settings:", this.settings);
    await this.saveData(this.settings);
  }
  refreshAllNotes() {
    this.app.workspace.trigger("markdown-preview-refresh");
    this.app.workspace.iterateAllLeaves((leaf) => {
      var _a;
      if (leaf.view.getViewType() === "markdown") {
        (_a = leaf.view.previewMode) == null ? void 0 : _a.rerender(true);
      }
    });
    new import_obsidian3.Notice("Applied emoji changes to all notes");
  }
};
//# sourceMappingURL=data:application/json;base64,
