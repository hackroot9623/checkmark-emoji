/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => EmojiChecklistPlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/types.ts
var DEFAULT_SETTINGS = {
  uncheckedEmoji: "\u2B55",
  checkedEmoji: "\u2705"
};

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var EmojiChecklistSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  updateTestSection() {
    if (this.testEl) {
      this.testEl.empty();
      const header = this.testEl.createEl("h3", { text: "Live Preview" });
      const uncheckedExample = this.testEl.createEl("div", { cls: "setting-item" });
      uncheckedExample.createEl("span", { text: "Unchecked example: " });
      const uncheckedContainer = uncheckedExample.createEl("span", { cls: "task-preview" });
      uncheckedContainer.createEl("span", {
        text: this.plugin.settings.uncheckedEmoji,
        cls: "emoji-preview"
      });
      uncheckedContainer.createEl("span", { text: " Sample task" });
      const checkedExample = this.testEl.createEl("div", { cls: "setting-item" });
      checkedExample.createEl("span", { text: "Checked example: " });
      const checkedContainer = checkedExample.createEl("span", { cls: "task-preview" });
      checkedContainer.createEl("span", {
        text: this.plugin.settings.checkedEmoji,
        cls: "emoji-preview"
      });
      const checkedText = checkedContainer.createEl("span", { text: " Sample task" });
      checkedText.style.textDecoration = "line-through";
      checkedText.style.color = "var(--text-muted)";
      header.style.marginTop = "2em";
      header.style.marginBottom = "1em";
      uncheckedExample.style.marginBottom = "0.5em";
      checkedExample.style.marginBottom = "0.5em";
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Emoji Checklist Settings" });
    new import_obsidian.Setting(containerEl).setName("Unchecked emoji").setDesc("Emoji to display for unchecked items").addText((text) => text.setPlaceholder("Enter emoji").setValue(this.plugin.settings.uncheckedEmoji).onChange(async (value) => {
      this.plugin.settings.uncheckedEmoji = value;
      await this.plugin.saveSettings();
      this.updateTestSection();
    }));
    new import_obsidian.Setting(containerEl).setName("Checked emoji").setDesc("Emoji to display for checked items").addText((text) => text.setPlaceholder("Enter emoji").setValue(this.plugin.settings.checkedEmoji).onChange(async (value) => {
      this.plugin.settings.checkedEmoji = value;
      await this.plugin.saveSettings();
      this.updateTestSection();
    }));
    new import_obsidian.Setting(containerEl).setName("Restore defaults").setDesc("Reset all settings to their default values").addButton((button) => button.setButtonText("Restore Defaults").onClick(async () => {
      this.plugin.settings = Object.assign({}, DEFAULT_SETTINGS);
      await this.plugin.saveSettings();
      this.display();
      new import_obsidian.Notice("Settings restored to defaults");
    }));
    this.testEl = containerEl.createDiv();
    this.updateTestSection();
  }
};

// src/processor.ts
var import_obsidian2 = __toModule(require("obsidian"));
var EmojiRenderChild = class extends import_obsidian2.MarkdownRenderChild {
  constructor(span) {
    super(span);
    this.span = span;
  }
  onunload() {
  }
};
var processCheckboxes = function(el, ctx) {
  const checkboxes = el.querySelectorAll('.contains-task-list input[type="checkbox"]');
  checkboxes.forEach((checkbox) => {
    if (checkbox instanceof HTMLInputElement) {
      const span = document.createElement("span");
      span.className = "task-list-emoji";
      span.textContent = checkbox.checked ? this.settings.checkedEmoji : this.settings.uncheckedEmoji;
      span.addEventListener("click", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        checkbox.checked = !checkbox.checked;
        span.textContent = checkbox.checked ? this.settings.checkedEmoji : this.settings.uncheckedEmoji;
        const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (view) {
          const editor = view.editor;
          const sectionInfo = ctx.getSectionInfo(el);
          if (sectionInfo) {
            const lineText = editor.getLine(sectionInfo.lineStart);
            const newText = checkbox.checked ? lineText.replace("[ ]", "[x]") : lineText.replace("[x]", "[ ]");
            editor.transaction({
              changes: [{
                from: { line: sectionInfo.lineStart, ch: 0 },
                to: { line: sectionInfo.lineStart, ch: lineText.length },
                text: newText
              }]
            });
          }
        }
        checkbox.dispatchEvent(new Event("change", { bubbles: true }));
        const sourcePath = ctx.sourcePath;
        if (sourcePath) {
          const renderChild = new EmojiRenderChild(span);
          ctx.addChild(renderChild);
        }
      });
      const container = checkbox.parentElement;
      if (container) {
        container.style.display = "flex";
        container.style.alignItems = "center";
        container.style.gap = "0.5em";
      }
      checkbox.style.display = "none";
      checkbox.after(span);
      checkbox.addEventListener("change", () => {
        span.textContent = checkbox.checked ? this.settings.checkedEmoji : this.settings.uncheckedEmoji;
      });
    }
  });
};

// src/main.ts
var EmojiChecklistPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerMarkdownPostProcessor(processCheckboxes.bind(this));
    this.addSettingTab(new EmojiChecklistSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
